<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>目录</title>
    <url>/2024/09/12/a01-root-catalog/</url>
    <content><![CDATA[<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h1 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h1>]]></content>
  </entry>
  <entry>
    <title>gradle 基本使用</title>
    <url>/2024/09/12/gradle-study/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>在这里 <a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a> 可以下载所有版本的 gralde , 我下载的是 <a href="https://services.gradle.org/distributions/gradle-8.10-all.zip">https://services.gradle.org/distributions/gradle-8.10-all.zip</a></p>
<h1 id="关于文档"><a href="#关于文档" class="headerlink" title="关于文档"></a>关于文档</h1><h2 id="一些文档汇总"><a href="#一些文档汇总" class="headerlink" title="一些文档汇总"></a>一些文档汇总</h2><p><a href="https://docs.gradle.org/8.10/userguide/userguide.html">gradle 8.10 官方文档</a></p>
<p><a href="https://doc.qzxdp.cn/gradle/8.1.1/userguide/userguide.html">gradle 用户手册</a></p>
<p><a href="https://gradle.github.net.cn/">gradle 中文网</a> 目测像是机翻</p>
<h2 id="怎么查找每个版本对应的官方文档"><a href="#怎么查找每个版本对应的官方文档" class="headerlink" title="怎么查找每个版本对应的官方文档"></a>怎么查找每个版本对应的官方文档</h2><p>第一种就是在官网上看, 在这个地址: <a href="https://gradle.org/releases/">https://gradle.org/releases/</a>, 有每个版本对应的手册</p>
<p><img src="/images/2024-09-12-gradle-study/001.png"></p>
<p>第二种就是在下载的 <code>gradle-xxx-all.zip</code> 中</p>
<p>!!! tip<br>    打开 <code>userguide.html</code> 即可, 那个 <code>userguide_single.html</code> 并不好用</p>
<pre><code>`userguide.pdf` 是 pdf 版本
</code></pre>
<p><img src="/images/2024-09-12-gradle-study/002.png"></p>
<h2 id="一个视频教程"><a href="#一个视频教程" class="headerlink" title="一个视频教程"></a>一个视频教程</h2><p><a href="https://www.bilibili.com/video/BV1Fc411x7xF">Gradle 教程 已完结 (基于Kotlin DSL讲解) 4K蓝光画质 超强的脚本式项目依赖和构建工具</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>解压后将 <code>bin</code> 目录添加到环境变量</li>
<li>添加 <code>GRADLE_USER_HOME</code> 环境变量, 关于此环境变量的作用可参考: <a href="https://blog.csdn.net/LG_15011399296/article/details/134333647">GRADLE_USER_HOME用法指南</a></li>
</ol>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><h2 id="直接命令行新建"><a href="#直接命令行新建" class="headerlink" title="直接命令行新建"></a>直接命令行新建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md spring-hello</span><br><span class="line">cd spring-hello</span><br><span class="line">gradle init</span><br></pre></td></tr></table></figure>

<p>选项如下</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>我的选择</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Select type of build to generate</td>
<td>1</td>
<td>一个应用程序</td>
</tr>
<tr>
<td>Select implementation language</td>
<td>1</td>
<td>语言为 java</td>
</tr>
<tr>
<td>Enter target Java version</td>
<td>8</td>
<td>当前我主要使用 java8</td>
</tr>
<tr>
<td>project name</td>
<td>默认</td>
<td></td>
</tr>
<tr>
<td>Select application structure</td>
<td>1</td>
<td>先学会使用单模块项目</td>
</tr>
<tr>
<td>Select build script DSL</td>
<td>1</td>
<td>官方推荐 kotlin dsl</td>
</tr>
<tr>
<td>Select test framework</td>
<td>2</td>
<td>个人习惯使用 testng</td>
</tr>
<tr>
<td>Generate build using new APIs and behavior</td>
<td>默认(即 no)</td>
<td>gradle API 变更极快, 不建议使用哪些尚不稳定的 API</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\github\gradle-study\spring-hello&gt;gradle init</span><br><span class="line">Starting a Gradle Daemon (subsequent builds will be faster)</span><br><span class="line"></span><br><span class="line">Select type of build to generate:</span><br><span class="line">  1: Application</span><br><span class="line">  2: Library</span><br><span class="line">  3: Gradle plugin</span><br><span class="line">  4: Basic (build structure only)</span><br><span class="line">Enter selection (default: Application) [1..4] 1</span><br><span class="line"></span><br><span class="line">Select implementation language:</span><br><span class="line">  1: Java</span><br><span class="line">  2: Kotlin</span><br><span class="line">  3: Groovy</span><br><span class="line">  4: Scala</span><br><span class="line">  5: C++</span><br><span class="line">  6: Swift</span><br><span class="line">Enter selection (default: Java) [1..6] 1</span><br><span class="line"></span><br><span class="line">Enter target Java version (min: 7, default: 21): 8</span><br><span class="line"></span><br><span class="line">Project name (default: spring-hello):</span><br><span class="line"></span><br><span class="line">Select application structure:</span><br><span class="line">  1: Single application project</span><br><span class="line">  2: Application and library project</span><br><span class="line">Enter selection (default: Single application project) [1..2] 1</span><br><span class="line"></span><br><span class="line">Select build script DSL:</span><br><span class="line">  1: Kotlin</span><br><span class="line">  2: Groovy</span><br><span class="line">Enter selection (default: Kotlin) [1..2] 1</span><br><span class="line"></span><br><span class="line">Select test framework:</span><br><span class="line">  1: JUnit 4</span><br><span class="line">  2: TestNG</span><br><span class="line">  3: Spock</span><br><span class="line">  4: JUnit Jupiter</span><br><span class="line">Enter selection (default: JUnit Jupiter) [1..4] 2</span><br><span class="line"></span><br><span class="line">Generate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; Task :init</span><br><span class="line">Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.10/samples/sample_building_java_applications.html</span><br><span class="line"></span><br><span class="line">Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.</span><br><span class="line"></span><br><span class="line">You can use &#x27;--warning-mode all&#x27; to show the individual deprecation warnings and determine if they come from your own scripts or plugins.</span><br><span class="line"></span><br><span class="line">For more on this, please refer to https://docs.gradle.org/8.10/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 31s</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">E:\github\gradle-study\spring-hello&gt;</span><br></pre></td></tr></table></figure>

<h2 id="新建后的一些配置"><a href="#新建后的一些配置" class="headerlink" title="新建后的一些配置"></a>新建后的一些配置</h2><p>不要着急用 <code>idea</code> 打开, 先修改一下 <code>gradle/wrapper/gradle-wrapper.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">distributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"> <span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-8.10-bin.zip</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">使用腾讯云镜像下载</span> <span class="string">gradle</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://mirrors.cloud.tencent.com/gradle/gradle-8.10-bin.zip</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networkTimeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">validateDistributionUrl</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>spring-hello/app/build.gradle.kts</code>, 添加阿里云镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven(&quot;https://maven.aliyun.com/repository/public/&quot;)</span><br><span class="line">    maven(&quot;https://maven.aliyun.com/repository/spring/&quot;)</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后用 <code>idea</code> 打开, 修改一下项目配置 File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle</p>
<p><img src="/images/2024-09-12-gradle-study/003.png"></p>
<p>开始运行</p>
<p><img src="/images/2024-09-12-gradle-study/004.png"></p>
<h1 id="单模块项目的基本操作"><a href="#单模块项目的基本操作" class="headerlink" title="单模块项目的基本操作"></a>单模块项目的基本操作</h1><h2 id="修改结构"><a href="#修改结构" class="headerlink" title="修改结构"></a>修改结构</h2><p>其实 <code>gradle</code> 新建的单模块项目还是一个多模块结构的, 这与我在 <code>maven</code> 中的使用习惯不一致</p>
<ol>
<li>直接复制 <code>app</code> 目录中的所有内容到根目录</li>
<li>删除 <code>app</code> 目录</li>
</ol>
<h2 id="添加依赖并测试"><a href="#添加依赖并测试" class="headerlink" title="添加依赖并测试"></a>添加依赖并测试</h2><h3 id="关于-version-catalog"><a href="#关于-version-catalog" class="headerlink" title="关于 version catalog"></a>关于 version catalog</h3><p>目前 <code>gradle</code> 在新建项目时会自动创建 <code>gradle/libs.versions.toml</code>, 这个目录就是所谓的 <code>version catalog</code>, 关于这个文件的作用可参考: </p>
<p><a href="https://doc.qzxdp.cn/gradle/8.1.1/userguide/platforms.html">gradle 用户手册 - 在项目之间共享依赖版本</a></p>
<p><a href="https://blog.csdn.net/qq_24889033/article/details/125307004">如何使用Gradle7.0+的VERSION_CATALOG</a></p>
<p>我们可以在 <code>libs.versions.toml</code> 中添加新的依赖并引用</p>
<h3 id="libs-versions-toml"><a href="#libs-versions-toml" class="headerlink" title="libs.versions.toml"></a>libs.versions.toml</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[versions]</span></span><br><span class="line"><span class="attr">lombok-version</span> = <span class="string">&quot;1.18.30&quot;</span></span><br><span class="line"><span class="attr">guava-version</span> = <span class="string">&quot;23.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logback-version</span> = <span class="string">&quot;1.2.12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">testng-version</span> = <span class="string">&quot;6.14.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[libraries]</span></span><br><span class="line"><span class="attr">lombok</span> = &#123; module = <span class="string">&quot;org.projectlombok:lombok&quot;</span>, version.ref = <span class="string">&quot;lombok-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">guava</span> = &#123; module = <span class="string">&quot;com.google.guava:guava&quot;</span>, version.ref = <span class="string">&quot;guava-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">logback-classic</span> = &#123;module = <span class="string">&quot;ch.qos.logback:logback-classic&quot;</span>,version.ref = <span class="string">&quot;logback-version&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">testng</span> = &#123; module = <span class="string">&quot;org.testng:testng&quot;</span>, version.ref = <span class="string">&quot;testng-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[bundles]</span></span><br><span class="line"><span class="attr">logback</span> = [<span class="string">&quot;logback-classic&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="build-gradle-kts"><a href="#build-gradle-kts" class="headerlink" title="build.gradle.kts"></a>build.gradle.kts</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.gradle.api.tasks.testing.logging.TestExceptionFormat</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    application</span><br><span class="line">    jacoco</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/spring/&quot;</span>)</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly(libs.lombok)</span><br><span class="line">    annotationProcessor(libs.lombok)</span><br><span class="line">    implementation(libs.guava)</span><br><span class="line"></span><br><span class="line">    implementation(libs.bundles.logback)</span><br><span class="line"></span><br><span class="line">    testImplementation(libs.testng)</span><br><span class="line">    testCompileOnly(libs.lombok)</span><br><span class="line">    testAnnotationProcessor(libs.lombok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">java &#123;</span><br><span class="line">    toolchain &#123;</span><br><span class="line">        languageVersion = JavaLanguageVersion.of(<span class="number">8</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass = <span class="string">&quot;com.laolang.jx.SpringHelloApp&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;Test&gt;(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">    useTestNG &#123;</span><br><span class="line">        suites(<span class="string">&quot;testng.xml&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出详细日志</span></span><br><span class="line">    testLogging &#123;</span><br><span class="line">        <span class="comment">// 记录日志的事件类型</span></span><br><span class="line">        events(<span class="string">&quot;FAILED&quot;</span>, <span class="string">&quot;PASSED&quot;</span>, <span class="string">&quot;SKIPPED&quot;</span>, <span class="string">&quot;STANDARD_ERROR&quot;</span>, <span class="string">&quot;STANDARD_OUT&quot;</span>, <span class="string">&quot;STARTED&quot;</span>)</span><br><span class="line">        <span class="comment">// 记录测试异常的格式</span></span><br><span class="line">        <span class="comment">// FULL: 完整显示异常</span></span><br><span class="line">        <span class="comment">// SHORT: 异常的简短显示</span></span><br><span class="line">        exceptionFormat = TestExceptionFormat.FULL</span><br><span class="line">        <span class="comment">// 是否记录标准输出和标准错误的输出</span></span><br><span class="line">        showStandardStreams = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finalizedBy(tasks.jacocoTestReport)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jacoco 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;JacocoReport&gt;(<span class="string">&quot;jacocoTestReport&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 依赖于测试任务</span></span><br><span class="line">    dependsOn(tasks.test)</span><br><span class="line"></span><br><span class="line">    reports &#123;</span><br><span class="line">        <span class="comment">// 把不需要的报告去掉</span></span><br><span class="line">        xml.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line">        csv.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只启用 html 报告</span></span><br><span class="line">        html.required.<span class="keyword">set</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jacoco 报告位置</span></span><br><span class="line">        html.outputLocation.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;jacocoHtml&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h3><p>如果此时直接运行, 在 <code>jacoco</code> 报告中查看代码时会有中文乱码的问题, 可以修改 <code>gradlew.bat</code> , 避免中文乱码, 同时也建议使用 <code>gradlew.bat</code> 来运行, 即通过 <code>wrapper</code> 运行 <code>gradle</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set DEFAULT_JVM_OPTS=&quot;-Xmx64m&quot; &quot;-Xms64m&quot; &quot;-Dfile.encoding=UTF-8&quot;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>此时直接运行 <code>gradlew.bat clean test</code> 即可, 运行之后可以查看如下两个报告</p>
<ol>
<li><code>build/jacocoHtml/index.html</code> 是 <code>jacoco</code> 的报告</li>
<li><code>build/reports/tests/test/index.html</code> 是 <code>gradle</code> 的测试报告</li>
</ol>
<p><img src="/images/2024-09-12-gradle-study/005.png"></p>
<p><img src="/images/2024-09-12-gradle-study/006.png"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li><code>lombok</code> 需要同时添加编译依赖和测试依赖</li>
<li><code>gradle</code> 默认不会输出测试日志, 需要配置</li>
<li>尽量使用 <code>wrapper</code> 运行</li>
</ol>
<h2 id="打包与发布"><a href="#打包与发布" class="headerlink" title="打包与发布"></a>打包与发布</h2><h3 id="build-gradle-kts-1"><a href="#build-gradle-kts-1" class="headerlink" title="build.gradle.kts"></a>build.gradle.kts</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.tasks.testing.logging.TestExceptionFormat</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    application</span><br><span class="line">    jacoco</span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;com.github.johnrengelman.shadow&quot;</span>) version <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置仓库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/spring/&quot;</span>)</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目坐标</span></span><br><span class="line">group = <span class="string">&quot;com.laolang.jx&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass = <span class="string">&quot;com.laolang.jx.SpringHelloApp&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly(libs.lombok)</span><br><span class="line">    annotationProcessor(libs.lombok)</span><br><span class="line">    implementation(libs.guava)</span><br><span class="line"></span><br><span class="line">    implementation(libs.bundles.logback)</span><br><span class="line"></span><br><span class="line">    testImplementation(libs.testng)</span><br><span class="line">    testCompileOnly(libs.lombok)</span><br><span class="line">    testAnnotationProcessor(libs.lombok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包时生成 source.jar 和 javadoc.jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">    withSourcesJar()</span><br><span class="line">    withJavadocJar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java 编译配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">    options.encoding = Charsets.UTF_8.name()</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javadoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;Javadoc&gt; &#123;</span><br><span class="line">    options &#123;</span><br><span class="line">        encoding = Charsets.UTF_8.name()</span><br><span class="line">        charset(Charsets.UTF_8.name())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 忽略 javadoc 报错</span></span><br><span class="line">    isFailOnError = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;Test&gt;(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">    useTestNG &#123;</span><br><span class="line">        suites(<span class="string">&quot;testng.xml&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出详细日志</span></span><br><span class="line">    testLogging &#123;</span><br><span class="line">        <span class="comment">// 记录日志的事件类型</span></span><br><span class="line">        events(<span class="string">&quot;FAILED&quot;</span>, <span class="string">&quot;PASSED&quot;</span>, <span class="string">&quot;SKIPPED&quot;</span>, <span class="string">&quot;STANDARD_ERROR&quot;</span>, <span class="string">&quot;STANDARD_OUT&quot;</span>, <span class="string">&quot;STARTED&quot;</span>)</span><br><span class="line">        <span class="comment">// 记录测试异常的格式</span></span><br><span class="line">        <span class="comment">// FULL: 完整显示异常</span></span><br><span class="line">        <span class="comment">// SHORT: 异常的简短显示</span></span><br><span class="line">        exceptionFormat = TestExceptionFormat.FULL</span><br><span class="line">        <span class="comment">// 是否记录标准输出和标准错误的输出</span></span><br><span class="line">        showStandardStreams = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finalizedBy(tasks.jacocoTestReport)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jacoco 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;JacocoReport&gt;(<span class="string">&quot;jacocoTestReport&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 依赖于测试任务</span></span><br><span class="line">    dependsOn(tasks.test)</span><br><span class="line"></span><br><span class="line">    reports &#123;</span><br><span class="line">        <span class="comment">// 把不需要的报告去掉</span></span><br><span class="line">        xml.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line">        csv.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只启用 html 报告</span></span><br><span class="line">        html.required.<span class="keyword">set</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jacoco 报告位置</span></span><br><span class="line">        html.outputLocation.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;jacocoHtml&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包可执行 jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;ShadowJar&gt;(<span class="string">&quot;shadowJar&quot;</span>) &#123;</span><br><span class="line">    archiveBaseName.<span class="keyword">set</span>(project.name)</span><br><span class="line">    archiveVersion.<span class="keyword">set</span>(project.version.toString())</span><br><span class="line">    archiveFileName.<span class="keyword">set</span>(project.name + <span class="string">&quot;.jar&quot;</span>)</span><br><span class="line"></span><br><span class="line">    destinationDirectory.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;shaded&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布到本地</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">    publications &#123;</span><br><span class="line">        create&lt;MavenPublication&gt;(<span class="string">&quot;maven&quot;</span>) &#123;</span><br><span class="line">            groupId = project.group.toString()</span><br><span class="line">            artifactId = project.name</span><br><span class="line">            version = project.version.toString()</span><br><span class="line"></span><br><span class="line">            from(components[<span class="string">&quot;java&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><ol>
<li>执行 <code>gradlew.bat build</code>, 可在 <code>build/shaded</code> 目录下生成可执行 jar</li>
<li>执行 <code>gradlew.bat publish</code> 可以发布到本地 maven 仓库</li>
</ol>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>如果没有在家目录的 <code>.m2/settings.xml</code> 中指定本地仓库路径, 那么默认会发布到 C 盘</p>
<h2 id="使用-bom"><a href="#使用-bom" class="headerlink" title="使用 bom"></a>使用 bom</h2><h3 id="如何引入-maven-bom"><a href="#如何引入-maven-bom" class="headerlink" title="如何引入 maven bom"></a>如何引入 maven bom</h3><p>在 <code>maven</code> 项目中经常使用如下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>gradle</code> 中同样具备此功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    implementation(platform(&quot;org.springframework:spring-framework-bom:5.3.31&quot;))</span><br><span class="line"></span><br><span class="line">    implementation(&quot;org.springframework:spring-context&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://doc.qzxdp.cn/gradle/8.1.1/userguide/platforms.html#sub:bom_import">gradle 中文手册 导入 Maven BOM</a></p>
<p><a href="https://stackoverflow.com/questions/53619890/how-to-use-a-maven-bom-for-spring-in-gradle">stack overflow How to use a maven BOM for Spring in Gradle?</a></p>
<p><a href="https://developer.aliyun.com/article/1025091">Gradle-04：BOM管理依赖版本</a></p>
<h2 id="查看和解决依赖冲突"><a href="#查看和解决依赖冲突" class="headerlink" title="查看和解决依赖冲突"></a>查看和解决依赖冲突</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>例如引入如下依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation(&quot;com.baomidou:mybatis-plus:3.5.1&quot;)</span><br><span class="line">implementation(&quot;com.github.pagehelper:pagehelper:5.3.0&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="查看方式一"><a href="#查看方式一" class="headerlink" title="查看方式一"></a>查看方式一</h3><p>运行 <code>gradle dependencies</code> 可以看到 <code>pagehelper</code> 和 <code>mybatis-plus</code> 同时引入了 <code>jsqlparser</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Root project &#x27;spring-hello&#x27;</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">annotationProcessor - Annotation processors and their dependencies for source set &#x27;main&#x27;.</span><br><span class="line">\--- org.projectlombok:lombok:1.18.30</span><br><span class="line"></span><br><span class="line">apiElements - API elements for main. (n)</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">archives - Configuration for archive artifacts. (n)</span><br><span class="line">No dependencies</span><br><span class="line"></span><br><span class="line">compileClasspath - Compile classpath for source set &#x27;main&#x27;.</span><br><span class="line">+--- org.projectlombok:lombok:1.18.30</span><br><span class="line">+--- ch.qos.logback:logback-classic:1.2.12</span><br><span class="line">|    +--- ch.qos.logback:logback-core:1.2.12</span><br><span class="line">|    \--- org.slf4j:slf4j-api:1.7.32</span><br><span class="line">+--- com.google.guava:guava:23.0</span><br><span class="line">|    +--- com.google.code.findbugs:jsr305:1.3.9</span><br><span class="line">|    +--- com.google.errorprone:error_prone_annotations:2.0.18</span><br><span class="line">|    +--- com.google.j2objc:j2objc-annotations:1.1</span><br><span class="line">|    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14</span><br><span class="line">+--- com.baomidou:mybatis-plus:3.5.1</span><br><span class="line">|    \--- com.baomidou:mybatis-plus-extension:3.5.1</span><br><span class="line">|         +--- com.baomidou:mybatis-plus-core:3.5.1</span><br><span class="line">|         |    +--- com.baomidou:mybatis-plus-annotation:3.5.1</span><br><span class="line">|         |    +--- com.github.jsqlparser:jsqlparser:4.3</span><br><span class="line">|         |    \--- org.mybatis:mybatis:3.5.9</span><br><span class="line">|         \--- org.mybatis:mybatis-spring:2.0.6</span><br><span class="line">\--- com.github.pagehelper:pagehelper:5.3.0</span><br><span class="line">     \--- com.github.jsqlparser:jsqlparser:4.2 -&gt; 4.3</span><br><span class="line"></span><br><span class="line">compileOnly - Compile only dependencies for source set &#x27;main&#x27;. (n)</span><br><span class="line">\--- org.projectlombok:lombok:1.18.30 (n)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看方式二"><a href="#查看方式二" class="headerlink" title="查看方式二"></a>查看方式二</h3><p>也可以运行命令 <code>gradle dependencyInsight --dependency jsqlparser --configuration compileClasspath</code> 查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\github\ghost-hello-project\gradle-study\spring-hello&gt;gradle dependencyInsight --dependency jsqlparser --configuration compileClasspath</span><br><span class="line"></span><br><span class="line">&gt; Task :dependencyInsight</span><br><span class="line">com.github.jsqlparser:jsqlparser:4.3</span><br><span class="line">  Variant compile:</span><br><span class="line">    | Attribute Name                 | Provided | Requested    |</span><br><span class="line">    |--------------------------------|----------|--------------|</span><br><span class="line">    | org.gradle.status              | release  |              |</span><br><span class="line">    | org.gradle.category            | library  | library      |</span><br><span class="line">    | org.gradle.libraryelements     | jar      | classes      |</span><br><span class="line">    | org.gradle.usage               | java-api | java-api     |</span><br><span class="line">    | org.gradle.dependency.bundling |          | external     |</span><br><span class="line">    | org.gradle.jvm.environment     |          | standard-jvm |</span><br><span class="line">    | org.gradle.jvm.version         |          | 8            |</span><br><span class="line">   Selection reasons:</span><br><span class="line">      - By conflict resolution: between versions 4.3 and 4.2</span><br><span class="line"></span><br><span class="line">com.github.jsqlparser:jsqlparser:4.3</span><br><span class="line">\--- com.baomidou:mybatis-plus-core:3.5.1</span><br><span class="line">     \--- com.baomidou:mybatis-plus-extension:3.5.1</span><br><span class="line">          \--- com.baomidou:mybatis-plus:3.5.1</span><br><span class="line">               \--- compileClasspath</span><br><span class="line"></span><br><span class="line">com.github.jsqlparser:jsqlparser:4.2 -&gt; 4.3</span><br><span class="line">\--- com.github.pagehelper:pagehelper:5.3.0</span><br><span class="line">     \--- compileClasspath</span><br><span class="line"></span><br><span class="line">A web-based, searchable dependency report is available by adding the --scan option.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 1s</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">E:\github\ghost-hello-project\gradle-study\spring-hello&gt;</span><br></pre></td></tr></table></figure>

<h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation(&quot;com.baomidou:mybatis-plus:3.5.1&quot;)</span><br><span class="line">implementation(&quot;com.github.pagehelper:pagehelper:5.3.0&quot;) &#123;</span><br><span class="line">    exclude(group = &quot;com.github.jsqlparser&quot;, module = &quot;jsqlparser&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行命令 <code>gradle dependencies --configuration compileClasspath</code> 再次查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\github\ghost-hello-project\gradle-study\spring-hello&gt;gradle dependencies --configuration compileClasspath</span><br><span class="line"></span><br><span class="line">&gt; Task :dependencies</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Root project &#x27;spring-hello&#x27;</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">compileClasspath - Compile classpath for source set &#x27;main&#x27;.</span><br><span class="line">+--- org.projectlombok:lombok:1.18.30</span><br><span class="line">+--- ch.qos.logback:logback-classic:1.2.12</span><br><span class="line">|    +--- ch.qos.logback:logback-core:1.2.12</span><br><span class="line">|    \--- org.slf4j:slf4j-api:1.7.32</span><br><span class="line">+--- com.google.guava:guava:23.0</span><br><span class="line">|    +--- com.google.code.findbugs:jsr305:1.3.9</span><br><span class="line">|    +--- com.google.errorprone:error_prone_annotations:2.0.18</span><br><span class="line">|    +--- com.google.j2objc:j2objc-annotations:1.1</span><br><span class="line">|    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14</span><br><span class="line">+--- com.baomidou:mybatis-plus:3.5.1</span><br><span class="line">|    \--- com.baomidou:mybatis-plus-extension:3.5.1</span><br><span class="line">|         +--- com.baomidou:mybatis-plus-core:3.5.1</span><br><span class="line">|         |    +--- com.baomidou:mybatis-plus-annotation:3.5.1</span><br><span class="line">|         |    +--- com.github.jsqlparser:jsqlparser:4.3</span><br><span class="line">|         |    \--- org.mybatis:mybatis:3.5.9</span><br><span class="line">|         \--- org.mybatis:mybatis-spring:2.0.6</span><br><span class="line">\--- com.github.pagehelper:pagehelper:5.3.0</span><br><span class="line"></span><br><span class="line">A web-based, searchable dependency report is available by adding the --scan option.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 1s</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">E:\github\ghost-hello-project\gradle-study\spring-hello&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://doc.qzxdp.cn/gradle/8.1.1/userguide/viewing_debugging_dependencies.html">gradle 中文文档 查看和调试依赖项</a></p>
<p><a href="https://blog.csdn.net/Jason847/article/details/76849680">使用Gradle命令查看项目中库的依赖关系</a></p>
<h2 id="查看任务依赖关系"><a href="#查看任务依赖关系" class="headerlink" title="查看任务依赖关系"></a>查看任务依赖关系</h2><h3 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    application</span><br><span class="line">    jacoco</span><br><span class="line">    id(<span class="string">&quot;com.github.johnrengelman.shadow&quot;</span>) version <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">    id(<span class="string">&quot;com.dorongold.task-tree&quot;</span>) version <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>执行 <code>gradle &lt;task 1&gt;...&lt;task N&gt; taskTree</code> 即可查看任务依赖关系, 例如 <code>gradle build taskTree</code> 输出如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\github\ghost-hello-project\gradle-study\spring-hello&gt;gradle build taskTree</span><br><span class="line"></span><br><span class="line">&gt; Task :taskTree</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Root project &#x27;spring-hello&#x27;</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">:build</span><br><span class="line">+--- :assemble</span><br><span class="line">|    +--- :distTar</span><br><span class="line">|    |    +--- :jar</span><br><span class="line">|    |    |    \--- :classes</span><br><span class="line">|    |    |         +--- :compileJava</span><br><span class="line">|    |    |         \--- :processResources</span><br><span class="line">|    |    \--- :startScripts</span><br><span class="line">|    |         \--- :jar *</span><br><span class="line">|    +--- :distZip</span><br><span class="line">|    |    +--- :jar *</span><br><span class="line">|    |    \--- :startScripts *</span><br><span class="line">|    +--- :jar *</span><br><span class="line">|    +--- :shadowDistTar</span><br><span class="line">|    |    +--- :shadowJar</span><br><span class="line">|    |    |    \--- :classes *</span><br><span class="line">|    |    \--- :startShadowScripts</span><br><span class="line">|    |         \--- :shadowJar *</span><br><span class="line">|    \--- :shadowDistZip</span><br><span class="line">|         +--- :shadowJar *</span><br><span class="line">|         \--- :startShadowScripts *</span><br><span class="line">\--- :check</span><br><span class="line">     \--- :test</span><br><span class="line">          +--- :classes *</span><br><span class="line">          \--- :testClasses</span><br><span class="line">               +--- :compileTestJava</span><br><span class="line">               |    \--- :classes *</span><br><span class="line">               \--- :processTestResources</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(*) - subtree omitted (printed previously)</span><br><span class="line">Add --repeat to allow printing a subtree of the same task more than once.</span><br><span class="line"></span><br><span class="line">To see task dependency tree for a specific task, run gradle &lt;project-path&gt;:&lt;task&gt; &lt;project-path&gt;:taskTree [--depth &lt;depth&gt;] [--with-inputs] [--with-outputs] [--with-description] [--repeat]</span><br><span class="line">Executions of all tasks except for taskTree are skipped. They are used for building the task graph only.</span><br><span class="line">For example, try running gradle :build :taskTree</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 822ms</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">E:\github\ghost-hello-project\gradle-study\spring-hello&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/dorongold/gradle-task-tree">gradle-task-tree github</a></p>
<h2 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h2><h3 id="添加-buildSrc"><a href="#添加-buildSrc" class="headerlink" title="添加 buildSrc"></a>添加 buildSrc</h3><p>关于 <code>buildSrc</code> 可参考 <a href="https://gradle.github.net.cn/current/userguide/sharing_build_logic_between_subprojects.html">在子项目之间共享构建逻辑</a></p>
<p><code>buildSrc/build.gradle.kts</code> 内容如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    `kotlin-dsl`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">        setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/spring/&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    gradlePluginPortal()</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>buildSrc</code> 中添加一个单例类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.laolang.jx.gradle</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> GradleUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getProfile</span><span class="params">(defaultProfile: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">var</span> profile: String? = System.getProperty(<span class="string">&quot;profile&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (profile.isNullOrBlank()) &#123;</span><br><span class="line">            profile = defaultProfile</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profile</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改目录结构"><a href="#修改目录结构" class="headerlink" title="修改目录结构"></a>修改目录结构</h3><p>删除 <code>src/main/resources</code> 中的所有文件, 并新建 <code>src/main/resources/dev</code> 和 <code>src/main/resources/test</code>. 将配置文件放在对应的目录, 例如 <code>src/main/resources/dev/spring-context.xml</code> 内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.laolang.jx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.laolang.jx.bean.HelloService&quot;</span> <span class="attr">p:msg</span>=<span class="string">&quot;dev msg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改根目录-build-gradle-kts"><a href="#修改根目录-build-gradle-kts" class="headerlink" title="修改根目录 build.gradle.kts"></a>修改根目录 build.gradle.kts</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar</span><br><span class="line"><span class="keyword">import</span> com.laolang.jx.gradle.GradleUtil</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.tasks.testing.logging.TestExceptionFormat</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    application</span><br><span class="line">    jacoco</span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;com.github.johnrengelman.shadow&quot;</span>) version <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">    id(<span class="string">&quot;com.dorongold.task-tree&quot;</span>) version <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置仓库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/spring/&quot;</span>)</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目坐标</span></span><br><span class="line">group = <span class="string">&quot;com.laolang.jx&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass = <span class="string">&quot;com.laolang.jx.SpringHelloApp&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// profile</span></span><br><span class="line"><span class="keyword">val</span> profile: String = GradleUtil.getProfile(<span class="string">&quot;dev&quot;</span>)</span><br><span class="line"><span class="comment">// 资源目录</span></span><br><span class="line"><span class="keyword">val</span> resourceDir = <span class="string">&quot;src/main/resources/<span class="variable">$profile</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置资源目录</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir(resourceDir)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    implementation(platform(<span class="string">&quot;org.springframework:spring-framework-bom:5.3.31&quot;</span>))</span><br><span class="line"></span><br><span class="line">    implementation(<span class="string">&quot;org.springframework:spring-context&quot;</span>)</span><br><span class="line"></span><br><span class="line">    compileOnly(libs.lombok)</span><br><span class="line">    annotationProcessor(libs.lombok)</span><br><span class="line">    implementation(libs.guava)</span><br><span class="line"></span><br><span class="line">    implementation(libs.bundles.logback)</span><br><span class="line"></span><br><span class="line">    testImplementation(libs.testng)</span><br><span class="line">    testCompileOnly(libs.lombok)</span><br><span class="line">    testAnnotationProcessor(libs.lombok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包时生成 source.jar 和 javadoc.jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">    withSourcesJar()</span><br><span class="line">    withJavadocJar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java 编译配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">    options.encoding = Charsets.UTF_8.name()</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排除 dev 目录和 test 目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;ProcessResources&gt; &#123;</span><br><span class="line">    exclude(<span class="string">&quot;dev/**&quot;</span>)</span><br><span class="line">    exclude(<span class="string">&quot;test/**&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javadoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;Javadoc&gt; &#123;</span><br><span class="line">    options &#123;</span><br><span class="line">        encoding = Charsets.UTF_8.name()</span><br><span class="line">        charset(Charsets.UTF_8.name())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 忽略 javadoc 报错</span></span><br><span class="line">    isFailOnError = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;Test&gt;(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">    useTestNG &#123;</span><br><span class="line">        suites(<span class="string">&quot;testng.xml&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出详细日志</span></span><br><span class="line">    testLogging &#123;</span><br><span class="line">        <span class="comment">// 记录日志的事件类型</span></span><br><span class="line">        events(<span class="string">&quot;FAILED&quot;</span>, <span class="string">&quot;PASSED&quot;</span>, <span class="string">&quot;SKIPPED&quot;</span>, <span class="string">&quot;STANDARD_ERROR&quot;</span>, <span class="string">&quot;STANDARD_OUT&quot;</span>, <span class="string">&quot;STARTED&quot;</span>)</span><br><span class="line">        <span class="comment">// 记录测试异常的格式</span></span><br><span class="line">        <span class="comment">// FULL: 完整显示异常</span></span><br><span class="line">        <span class="comment">// SHORT: 异常的简短显示</span></span><br><span class="line">        exceptionFormat = TestExceptionFormat.FULL</span><br><span class="line">        <span class="comment">// 是否记录标准输出和标准错误的输出</span></span><br><span class="line">        showStandardStreams = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finalizedBy(tasks.jacocoTestReport)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jacoco 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;JacocoReport&gt;(<span class="string">&quot;jacocoTestReport&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 依赖于测试任务</span></span><br><span class="line">    dependsOn(tasks.test)</span><br><span class="line"></span><br><span class="line">    reports &#123;</span><br><span class="line">        <span class="comment">// 把不需要的报告去掉</span></span><br><span class="line">        xml.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line">        csv.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只启用 html 报告</span></span><br><span class="line">        html.required.<span class="keyword">set</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jacoco 报告位置</span></span><br><span class="line">        html.outputLocation.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;jacocoHtml&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包可执行 jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;ShadowJar&gt;(<span class="string">&quot;shadowJar&quot;</span>) &#123;</span><br><span class="line">    archiveBaseName.<span class="keyword">set</span>(project.name)</span><br><span class="line">    archiveVersion.<span class="keyword">set</span>(project.version.toString())</span><br><span class="line">    archiveFileName.<span class="keyword">set</span>(project.name + <span class="string">&quot;.jar&quot;</span>)</span><br><span class="line"></span><br><span class="line">    destinationDirectory.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;shaded&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布到本地</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">    publications &#123;</span><br><span class="line">        create&lt;MavenPublication&gt;(<span class="string">&quot;maven&quot;</span>) &#123;</span><br><span class="line">            groupId = project.group.toString()</span><br><span class="line">            artifactId = project.name</span><br><span class="line">            version = project.version.toString()</span><br><span class="line"></span><br><span class="line">            from(components[<span class="string">&quot;java&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><code>gradlew.bat -Dprofile=test run</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\github\gradle-study\spring-hello&gt;gradlew.bat -Dprofile=test run</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">profile:test</span><br><span class="line"></span><br><span class="line">&gt; Task :run</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2024-09-11 09:08:51.229 [main] INFO  com.laolang.jx.SpringHelloApp            - bean.msg:test msg</span><br><span class="line"></span><br><span class="line">Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.</span><br><span class="line"></span><br><span class="line">You can use &#x27;--warning-mode all&#x27; to show the individual deprecation warnings and determine if they come from your own scripts or plugins.</span><br><span class="line"></span><br><span class="line">For more on this, please refer to https://docs.gradle.org/8.10/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 2s</span><br><span class="line">7 actionable tasks: 2 executed, 5 up-to-date</span><br><span class="line">E:\github\gradle-study\spring-hello&gt;</span><br></pre></td></tr></table></figure>

<p><code>gradlew.bat -Dprofile=dev run</code> 或者 <code>gradlew.bat run</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\github\gradle-study\spring-hello&gt;gradlew.bat run</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">profile:dev</span><br><span class="line"></span><br><span class="line">&gt; Task :run</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2024-09-11 09:10:03.309 [main] INFO  com.laolang.jx.SpringHelloApp            - bean.msg:dev msg</span><br><span class="line"></span><br><span class="line">Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.</span><br><span class="line"></span><br><span class="line">You can use &#x27;--warning-mode all&#x27; to show the individual deprecation warnings and determine if they come from your own scripts or plugins.</span><br><span class="line"></span><br><span class="line">For more on this, please refer to https://docs.gradle.org/8.10/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 1s</span><br><span class="line">7 actionable tasks: 2 executed, 5 up-to-date</span><br><span class="line">E:\github\gradle-study\spring-hello&gt;</span><br></pre></td></tr></table></figure>


<h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><p><a href="https://gradle.github.net.cn/current/userguide/build_environment.html#sec:gradle_system_properties">gradle 中文手册 · 配置构建环境</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1798260">Gradle构建时像Maven那样根据profile环境打包</a></p>
<p><a href="https://www.cnblogs.com/yjmyzz/p/gradle-profile.html">gradle项目中profile的实现</a></p>
<p><a href="https://blog.gradle.org/maven-pom-profiles">Gradle’s Support for Maven POM Profiles</a></p>
<h2 id="单模块项目总结与代码地址"><a href="#单模块项目总结与代码地址" class="headerlink" title="单模块项目总结与代码地址"></a>单模块项目总结与代码地址</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>遇事不决, google</li>
<li>多看官方文档</li>
<li>理论与实践相结合</li>
<li>profile 的实现有很多种方式, 我只是选了其中一种</li>
</ol>
<h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/laolang2016/gradle-study/tree/master/spring-hello">https://github.com/laolang2016/gradle-study/tree/master/spring-hello</a></p>
<h1 id="spring-mvc-schema-项目示例"><a href="#spring-mvc-schema-项目示例" class="headerlink" title="spring mvc schema 项目示例"></a>spring mvc schema 项目示例</h1><h2 id="代码地址-1"><a href="#代码地址-1" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/laolang2016/gradle-study/tree/master/jx-schema">https://github.com/laolang2016/gradle-study/tree/master/jx-schema</a></p>
<h2 id="gradle-配置说明"><a href="#gradle-配置说明" class="headerlink" title="gradle 配置说明"></a>gradle 配置说明</h2><h3 id="libs-version-toml"><a href="#libs-version-toml" class="headerlink" title="libs.version.toml"></a>libs.version.toml</h3><p>!!! tip<br>    使用 bom 之后, 这个文件就不需要写 spring 依赖的版本号了</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[versions]</span></span><br><span class="line"><span class="attr">javax-servlet-api-version</span> = <span class="string">&quot;3.1.0&quot;</span></span><br><span class="line"><span class="attr">jackson-version</span> = <span class="string">&quot;2.13.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logback-version</span> = <span class="string">&quot;1.2.12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lombok-version</span> = <span class="string">&quot;1.18.30&quot;</span></span><br><span class="line"><span class="attr">hutool-version</span> = <span class="string">&quot;5.8.11&quot;</span></span><br><span class="line"><span class="attr">vavr-version</span> = <span class="string">&quot;0.10.4&quot;</span></span><br><span class="line"><span class="attr">mapstruct-version</span> = <span class="string">&quot;1.4.2.Final&quot;</span></span><br><span class="line"><span class="attr">guava-version</span> = <span class="string">&quot;23.0&quot;</span></span><br><span class="line"><span class="attr">commons-lang3-version</span> = <span class="string">&quot;3.12.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">testng-version</span> = <span class="string">&quot;6.14.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[libraries]</span></span><br><span class="line"><span class="attr">javax-servlet-api</span> = &#123; module = <span class="string">&quot;javax.servlet:javax.servlet-api&quot;</span>, version.ref = <span class="string">&quot;javax-servlet-api-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">spring-context</span> = &#123; module = <span class="string">&quot;org.springframework:spring-context&quot;</span> &#125;</span><br><span class="line"><span class="attr">spring-context-support</span> = &#123; module = <span class="string">&quot;org.springframework:spring-context-support&quot;</span> &#125;</span><br><span class="line"><span class="attr">spring-webmvc</span> = &#123; module = <span class="string">&quot;org.springframework:spring-webmvc&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">jackson-databind</span> = &#123; module = <span class="string">&quot;com.fasterxml.jackson.core:jackson-databind&quot;</span>, version.ref = <span class="string">&quot;jackson-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">jackson-datatype-jdk8</span> = &#123; module = <span class="string">&quot;com.fasterxml.jackson.datatype:jackson-datatype-jdk8&quot;</span>, version.ref = <span class="string">&quot;jackson-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">jackson-datatype-jsr310</span> = &#123; module = <span class="string">&quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310&quot;</span>, version.ref = <span class="string">&quot;jackson-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">jackson-module-parameter-names</span> = &#123; module = <span class="string">&quot;com.fasterxml.jackson.module:jackson-module-parameter-names&quot;</span>, version.ref = <span class="string">&quot;jackson-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">logback-classic</span> = &#123; module = <span class="string">&quot;ch.qos.logback:logback-classic&quot;</span>, version.ref = <span class="string">&quot;logback-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">lombok</span> = &#123; module = <span class="string">&quot;org.projectlombok:lombok&quot;</span>, version.ref = <span class="string">&quot;lombok-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">hutool-all</span> = &#123; module = <span class="string">&quot;cn.hutool:hutool-all&quot;</span>, version.ref = <span class="string">&quot;hutool-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">vavr</span> = &#123; module = <span class="string">&quot;io.vavr:vavr&quot;</span>, version.ref = <span class="string">&quot;vavr-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">mapstruct-mapstruct</span> = &#123; module = <span class="string">&quot;org.mapstruct:mapstruct&quot;</span>, version.ref = <span class="string">&quot;mapstruct-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">mapstruct-jdk8</span> = &#123; module = <span class="string">&quot;org.mapstruct:mapstruct-jdk8&quot;</span>, version.ref = <span class="string">&quot;mapstruct-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">mapstruct-processor</span> = &#123; module = <span class="string">&quot;org.mapstruct:mapstruct-processor&quot;</span>, version.ref = <span class="string">&quot;mapstruct-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">guava</span> = &#123; module = <span class="string">&quot;com.google.guava:guava&quot;</span>, version.ref = <span class="string">&quot;guava-version&quot;</span> &#125;</span><br><span class="line"><span class="attr">commons-lang3</span> = &#123; module = <span class="string">&quot;org.apache.commons:commons-lang3&quot;</span>, version.ref = <span class="string">&quot;commons-lang3-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">testng</span> = &#123; module = <span class="string">&quot;org.testng:testng&quot;</span>, version.ref = <span class="string">&quot;testng-version&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[bundles]</span></span><br><span class="line"><span class="attr">spring</span> = [<span class="string">&quot;spring-context&quot;</span>, <span class="string">&quot;spring-context-support&quot;</span>, <span class="string">&quot;spring-webmvc&quot;</span>]</span><br><span class="line"><span class="attr">jackson</span> = [<span class="string">&quot;jackson-databind&quot;</span>, <span class="string">&quot;jackson-datatype-jdk8&quot;</span>, <span class="string">&quot;jackson-datatype-jsr310&quot;</span>, <span class="string">&quot;jackson-module-parameter-names&quot;</span>]</span><br><span class="line"><span class="attr">mapstruct</span> = [<span class="string">&quot;mapstruct-mapstruct&quot;</span>, <span class="string">&quot;mapstruct-jdk8&quot;</span>, <span class="string">&quot;mapstruct-processor&quot;</span>]</span><br><span class="line"><span class="attr">logback</span> = [<span class="string">&quot;logback-classic&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="build-gradle-kts-2"><a href="#build-gradle-kts-2" class="headerlink" title="build.gradle.kts"></a>build.gradle.kts</h3><p><code>maven</code> 有 <code>jetty</code> 插件, <code>gradle</code> 则有 <code>gretty</code>, 运行方式都一样, 但是 <code>gretty</code> debug 需要使用远程调试, 目前还没找到 idea 直接 debug 的方式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.gradle.api.tasks.testing.logging.TestExceptionFormat</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    war</span><br><span class="line">    id(<span class="string">&quot;org.gretty&quot;</span>) version <span class="string">&quot;3.0.9&quot;</span></span><br><span class="line">    jacoco</span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;com.dorongold.task-tree&quot;</span>) version <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置仓库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">    maven(<span class="string">&quot;https://maven.aliyun.com/repository/spring/&quot;</span>)</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目坐标</span></span><br><span class="line">group = <span class="string">&quot;com.laolang.jx&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    implementation(platform(<span class="string">&quot;org.springframework:spring-framework-bom:5.3.31&quot;</span>))</span><br><span class="line"></span><br><span class="line">    implementation(libs.javax.servlet.api)</span><br><span class="line">    implementation(libs.bundles.spring)</span><br><span class="line">    implementation(libs.bundles.jackson)</span><br><span class="line"></span><br><span class="line">    implementation(libs.bundles.logback)</span><br><span class="line"></span><br><span class="line">    compileOnly(libs.lombok)</span><br><span class="line">    annotationProcessor(libs.lombok)</span><br><span class="line">    implementation(libs.hutool.all)</span><br><span class="line">    implementation(libs.vavr)</span><br><span class="line">    implementation(libs.bundles.mapstruct)</span><br><span class="line">    implementation(libs.guava)</span><br><span class="line">    implementation(libs.commons.lang3)</span><br><span class="line"></span><br><span class="line">    testImplementation(libs.testng)</span><br><span class="line">    testCompileOnly(libs.lombok)</span><br><span class="line">    testAnnotationProcessor(libs.lombok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包时生成 source.jar 和 javadoc.jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">    withSourcesJar()</span><br><span class="line">    withJavadocJar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java 编译配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">    options.encoding = Charsets.UTF_8.name()</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javadoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;Javadoc&gt; &#123;</span><br><span class="line">    options &#123;</span><br><span class="line">        encoding = Charsets.UTF_8.name()</span><br><span class="line">        charset(Charsets.UTF_8.name())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 忽略 javadoc 报错</span></span><br><span class="line">    isFailOnError = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;Test&gt;(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">    useTestNG &#123;</span><br><span class="line">        suites(<span class="string">&quot;testng.xml&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出详细日志</span></span><br><span class="line">    testLogging &#123;</span><br><span class="line">        <span class="comment">// 记录日志的事件类型</span></span><br><span class="line">        events(<span class="string">&quot;FAILED&quot;</span>, <span class="string">&quot;PASSED&quot;</span>, <span class="string">&quot;SKIPPED&quot;</span>, <span class="string">&quot;STANDARD_ERROR&quot;</span>, <span class="string">&quot;STANDARD_OUT&quot;</span>, <span class="string">&quot;STARTED&quot;</span>)</span><br><span class="line">        <span class="comment">// 记录测试异常的格式</span></span><br><span class="line">        <span class="comment">// FULL: 完整显示异常</span></span><br><span class="line">        <span class="comment">// SHORT: 异常的简短显示</span></span><br><span class="line">        exceptionFormat = TestExceptionFormat.FULL</span><br><span class="line">        <span class="comment">// 是否记录标准输出和标准错误的输出</span></span><br><span class="line">        showStandardStreams = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    finalizedBy(tasks.jacocoTestReport)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * war 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;War&gt;&#123;</span><br><span class="line">    archiveBaseName = project.name</span><br><span class="line">    version = project.version</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jacoco 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;JacocoReport&gt;(<span class="string">&quot;jacocoTestReport&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 依赖于测试任务</span></span><br><span class="line">    dependsOn(tasks.test)</span><br><span class="line"></span><br><span class="line">    reports &#123;</span><br><span class="line">        <span class="comment">// 把不需要的报告去掉</span></span><br><span class="line">        xml.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line">        csv.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只启用 html 报告</span></span><br><span class="line">        html.required.<span class="keyword">set</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jacoco 报告位置</span></span><br><span class="line">        html.outputLocation.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;jacocoHtml&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布到本地</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">    publications &#123;</span><br><span class="line">        create&lt;MavenPublication&gt;(<span class="string">&quot;maven&quot;</span>) &#123;</span><br><span class="line">            groupId = project.group.toString()</span><br><span class="line">            artifactId = project.name</span><br><span class="line">            version = project.version.toString()</span><br><span class="line"></span><br><span class="line">            from(components[<span class="string">&quot;java&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * gretty</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gretty&#123;</span><br><span class="line">    <span class="comment">// 服务端口号</span></span><br><span class="line">    httpPort = <span class="number">8096</span></span><br><span class="line">    <span class="comment">// 服务根路径</span></span><br><span class="line">    contextPath = <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 远程调试端口号</span></span><br><span class="line">    debugPort = <span class="number">8098</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>直接执行 <code>gretty</code> 的 <code>appRun</code> 即可</p>
<p><img src="/images/2024-09-12-gradle-study/007.png"></p>
<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>首先执行 <code>gretty</code> 的 <code>appRunDebug</code></p>
<p><img src="/images/2024-09-12-gradle-study/008.png"></p>
<p>然后配置 remote debug 并启动</p>
<p><img src="/images/2024-09-12-gradle-study/009.png"></p>
<p>然后切换到 <code>appRunDebug</code>, 稍等一两秒就会看到项目成功启动了, 此时断点已经可以正常使用</p>
<p><img src="/images/2024-09-12-gradle-study/010.png"></p>
<h2 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h2><p><a href="https://doc.qzxdp.cn/gradle/8.1.1/userguide/war_plugin.html">gradle 中文文档 war 插件</a></p>
<p>gretty 官网: <a href="https://gretty-gradle-plugin.github.io/gretty-doc/">https://gretty-gradle-plugin.github.io/gretty-doc/</a></p>
<p><a href="https://www.cnblogs.com/qrlozte/p/8734512.html">IDEA community + Gradle + Gretty 调试 servlet 应用 + war包部署到tomcat</a></p>
<p><a href="https://www.cnblogs.com/gzdaijie/p/5267166.html">Java Gradle入门指南之gretty插件（安装、命令与核心特性）</a></p>
<h1 id="spring-单体项目"><a href="#spring-单体项目" class="headerlink" title="spring 单体项目"></a>spring 单体项目</h1><h2 id="根目录-build-gradle-kts"><a href="#根目录-build-gradle-kts" class="headerlink" title="根目录 build.gradle.kts"></a>根目录 build.gradle.kts</h2><p>与 <a href="https://github.com/laolang2016/gradle-study/tree/master/jx-schema">spring mvc schema</a> 项目比起来并没有太大的区别</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.laolang.gradle.mavenAlibaba</span><br><span class="line"><span class="keyword">import</span> com.laolang.gradle.util.GradleUtil</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.tasks.testing.logging.TestExceptionFormat</span><br><span class="line"><span class="keyword">import</span> org.gradle.<span class="keyword">internal</span>.classpath.Instrumented.systemProperty</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.gradle.tasks.bundling.BootJar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenAlibaba()</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    application</span><br><span class="line">    jacoco</span><br><span class="line">    id(<span class="string">&quot;com.dorongold.task-tree&quot;</span>) version <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;org.springframework.boot&quot;</span>) version <span class="string">&quot;2.7.6&quot;</span></span><br><span class="line">    id(<span class="string">&quot;io.spring.dependency-management&quot;</span>) version <span class="string">&quot;1.0.15.RELEASE&quot;</span></span><br><span class="line">    id(<span class="string">&quot;my-plugin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目坐标</span></span><br><span class="line">group = <span class="string">&quot;com.laolang.jx&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass.<span class="keyword">set</span>(<span class="string">&quot;com.laolang.jx.JxApplication&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// profile</span></span><br><span class="line"><span class="keyword">val</span> profile: String = GradleUtil.getProfile(<span class="string">&quot;dev&quot;</span>)</span><br><span class="line"><span class="comment">// 资源目录</span></span><br><span class="line"><span class="keyword">val</span> resourceDir = <span class="string">&quot;src/main/resources/<span class="variable">$profile</span>&quot;</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;profile:<span class="variable">$profile</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置资源目录</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir(resourceDir)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-log4j2&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-json&quot;</span>)</span><br><span class="line">    annotationProcessor(<span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor&quot;</span>)</span><br><span class="line">    compileOnly(<span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor&quot;</span>)</span><br><span class="line"></span><br><span class="line">    implementation(libs.tlog)</span><br><span class="line"></span><br><span class="line">    implementation(libs.hutool.all)</span><br><span class="line">    implementation(libs.vavr)</span><br><span class="line">    implementation(libs.bundles.mapstruct)</span><br><span class="line">    implementation(libs.guava)</span><br><span class="line">    compileOnly(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">    annotationProcessor(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;org.apache.commons:commons-lang3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    testImplementation(libs.testng)</span><br><span class="line">    testCompileOnly(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">    testAnnotationProcessor(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于引入了 log4j2 , 故此处排除 spring-boot 默认的 logback 日志依赖</span></span><br><span class="line">    configurations &#123;</span><br><span class="line">        all &#123;</span><br><span class="line">            exclude(group = <span class="string">&quot;org.springframework.boot&quot;</span>, module = <span class="string">&quot;spring-boot-starter-logging&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包时生成 source.jar 和 javadoc.jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">    withSourcesJar()</span><br><span class="line">    withJavadocJar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java 编译配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">    options.encoding = Charsets.UTF_8.name()</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_1_8.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.named&lt;Test&gt;(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">    useTestNG &#123;</span><br><span class="line">        suites(<span class="string">&quot;testng.xml&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出详细日志</span></span><br><span class="line">    testLogging &#123;</span><br><span class="line">        <span class="comment">// 记录日志的事件类型</span></span><br><span class="line">        events(<span class="string">&quot;FAILED&quot;</span>, <span class="string">&quot;PASSED&quot;</span>, <span class="string">&quot;SKIPPED&quot;</span>, <span class="string">&quot;STANDARD_ERROR&quot;</span>, <span class="string">&quot;STANDARD_OUT&quot;</span>, <span class="string">&quot;STARTED&quot;</span>)</span><br><span class="line">        <span class="comment">// 记录测试异常的格式</span></span><br><span class="line">        <span class="comment">// FULL: 完整显示异常</span></span><br><span class="line">        <span class="comment">// SHORT: 异常的简短显示</span></span><br><span class="line">        exceptionFormat = TestExceptionFormat.FULL</span><br><span class="line">        <span class="comment">// 是否记录标准输出和标准错误的输出</span></span><br><span class="line">        showStandardStreams = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    finalizedBy(tasks.jacocoTestReport)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javadoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;Javadoc&gt; &#123;</span><br><span class="line">    options &#123;</span><br><span class="line">        encoding = Charsets.UTF_8.name()</span><br><span class="line">        charset(Charsets.UTF_8.name())</span><br><span class="line">        windowTitle = <span class="string">&quot;spring-hello&quot;</span></span><br><span class="line">        header = <span class="string">&quot;spring-hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 忽略 javadoc 报错</span></span><br><span class="line">    isFailOnError = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jacoco 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;JacocoReport&gt;(<span class="string">&quot;jacocoTestReport&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 依赖于测试任务</span></span><br><span class="line">    dependsOn(tasks.test)</span><br><span class="line"></span><br><span class="line">    reports &#123;</span><br><span class="line">        xml.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line">        csv.required.<span class="keyword">set</span>(<span class="literal">false</span>)</span><br><span class="line">        html.required.<span class="keyword">set</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        html.outputLocation.<span class="keyword">set</span>(layout.buildDirectory.dir(<span class="string">&quot;jacocoHtml&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring-boot 打包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;BootJar&gt;(<span class="string">&quot;bootJar&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// jar 包名称</span></span><br><span class="line">    archiveBaseName.<span class="keyword">set</span>(<span class="string">&quot;jx-boot&quot;</span>)</span><br><span class="line">    <span class="comment">// 版本号设置为空</span></span><br><span class="line">    archiveVersion.<span class="keyword">set</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布到本地</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">    publications &#123;</span><br><span class="line">        create&lt;MavenPublication&gt;(<span class="string">&quot;maven&quot;</span>) &#123;</span><br><span class="line">            groupId = project.group.toString()</span><br><span class="line">            artifactId = project.name</span><br><span class="line">            version = project.version.toString()</span><br><span class="line"></span><br><span class="line">            from(components[<span class="string">&quot;java&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring-配置文件"><a href="#spring-配置文件" class="headerlink" title="spring 配置文件"></a>spring 配置文件</h2><p>在每个 <code>profile</code> 目录中直接写死 <code>spring.profiles.active</code>, 例如 <code>resources/dev/application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8096</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jx-boot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log4j2.xml</span></span><br></pre></td></tr></table></figure>

<h2 id="代码地址-2"><a href="#代码地址-2" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/laolang2016/gradle-study/tree/master/jx-boot">https://github.com/laolang2016/gradle-study/tree/master/jx-boot</a></p>
<h2 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gist.github.com/jakzal/1ff82e1c4c2a83805c370c17cc7308bc">Run a Spring Boot application with the dev profile (Gradle Kotlin DSL)</a></p>
<h1 id="spring-boot-多模块项目"><a href="#spring-boot-多模块项目" class="headerlink" title="spring boot 多模块项目"></a>spring boot 多模块项目</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/images/2024-09-12-gradle-study/011.png"></p>
<h2 id="settings-gradle-kts"><a href="#settings-gradle-kts" class="headerlink" title="settings.gradle.kts"></a>settings.gradle.kts</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">// 插件使用阿里云 maven 源</span></span><br><span class="line">        maven(<span class="string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>)</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.name = <span class="string">&quot;jx-boot-multi&quot;</span></span><br><span class="line"></span><br><span class="line">include(<span class="string">&quot;:jx-app&quot;</span>)</span><br><span class="line"></span><br><span class="line">include(<span class="string">&quot;:jx-framework:jx-common&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;:jx-framework:jx-spring-boot-starter-web&quot;</span>)</span><br><span class="line"></span><br><span class="line">include(<span class="string">&quot;:jx-module:jx-module-system:jx-module-system-api&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;:jx-module:jx-module-system:jx-module-system-biz&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="根目录-build-gradle-kts【重要】"><a href="#根目录-build-gradle-kts【重要】" class="headerlink" title="根目录 build.gradle.kts【重要】"></a>根目录 build.gradle.kts【重要】</h2><p>!!! tip<br>    重要文件</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.laolang.gradle.Version</span><br><span class="line"><span class="keyword">import</span> com.laolang.gradle.mavenAlibaba</span><br><span class="line"><span class="keyword">import</span> io.spring.gradle.dependencymanagement.dsl.DependencyManagementExtension</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用插件之前需要先声明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;org.springframework.boot&quot;</span>) version <span class="string">&quot;2.7.18&quot;</span></span><br><span class="line">    id(<span class="string">&quot;io.spring.dependency-management&quot;</span>) version <span class="string">&quot;1.0.14.RELEASE&quot;</span></span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;com.dorongold.task-tree&quot;</span>) version <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有工程的配置, 包含根项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenAlibaba()</span><br><span class="line">        mavenLocal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有子工程的配置, 不包含根项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">subprojects &#123;</span><br><span class="line">    <span class="comment">// 不处理主工程, 主工程单独写构建文件</span></span><br><span class="line">    <span class="keyword">if</span> (name != <span class="string">&quot;jx-app&quot;</span>) &#123;</span><br><span class="line">        apply(plugin = <span class="string">&quot;java-library&quot;</span>)</span><br><span class="line">        apply(plugin = <span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">        apply(plugin = <span class="string">&quot;com.dorongold.task-tree&quot;</span>)</span><br><span class="line">        apply(plugin = <span class="string">&quot;io.spring.dependency-management&quot;</span>)</span><br><span class="line"></span><br><span class="line">        group = <span class="string">&quot;com.laolang.jx&quot;</span></span><br><span class="line">        version = <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 导入 Spring Boot 的 bom</span></span><br><span class="line">        the&lt;DependencyManagementExtension&gt;().apply &#123;</span><br><span class="line">            imports &#123;</span><br><span class="line">                mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这里 全局导入 lombok</span></span><br><span class="line">        dependencies &#123;</span><br><span class="line">            compileOnly(rootProject.libs.lombok)</span><br><span class="line">            annotationProcessor(rootProject.libs.lombok)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打包时生成 source.jar 和 javadoc.jar</span></span><br><span class="line">        configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">            withSourcesJar()</span><br><span class="line">            withJavadocJar()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * java 编译配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        tasks.withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">            options.encoding = Charsets.UTF_8.name()</span><br><span class="line">            sourceCompatibility = Version.sourceCompatibility.toString()</span><br><span class="line">            targetCompatibility = Version.targetCompatibility.toString()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * javadoc</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        tasks.withType&lt;Javadoc&gt; &#123;</span><br><span class="line">            options &#123;</span><br><span class="line">                encoding = Charsets.UTF_8.name()</span><br><span class="line">                charset(Charsets.UTF_8.name())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 忽略 javadoc 报错</span></span><br><span class="line">            isFailOnError = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发布到本地</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        publishing &#123;</span><br><span class="line">            repositories &#123;</span><br><span class="line">                mavenLocal()</span><br><span class="line">            &#125;</span><br><span class="line">            publications &#123;</span><br><span class="line">                create&lt;MavenPublication&gt;(<span class="string">&quot;maven&quot;</span>) &#123;</span><br><span class="line">                    groupId = project.group.toString()</span><br><span class="line">                    artifactId = project.name</span><br><span class="line">                    version = project.version.toString()</span><br><span class="line"></span><br><span class="line">                    from(components[<span class="string">&quot;java&quot;</span>])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意这里</span></span><br><span class="line"><span class="comment"> * 由于根项目添加了 spring-boot 插件, 所有根项目在打包时也会执行 bootJar</span></span><br><span class="line"><span class="comment"> * 而根项目又没有 java 启动类, 就会导致打包报错</span></span><br><span class="line"><span class="comment"> * 下面的配置可忽略根项目的 bootJar 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.bootJar &#123;</span><br><span class="line">    enabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="主工程-build-gradle-kts【重要】"><a href="#主工程-build-gradle-kts【重要】" class="headerlink" title="主工程 build.gradle.kts【重要】"></a>主工程 build.gradle.kts【重要】</h2><p>其实和 <a href="https://github.com/laolang2016/gradle-study/tree/master/jx-boot">spring boot</a> 比起来并没有什么不同</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.laolang.gradle.Version</span><br><span class="line"><span class="keyword">import</span> com.laolang.gradle.util.GradleUtil</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.gradle.tasks.bundling.BootJar</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已经在根项目声明过的插件,在子项目中使用时, 不需要写版本号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    application</span><br><span class="line">    id(<span class="string">&quot;org.springframework.boot&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;io.spring.dependency-management&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;com.dorongold.task-tree&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass.<span class="keyword">set</span>(<span class="string">&quot;com.laolang.jx.App&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// profile</span></span><br><span class="line"><span class="keyword">val</span> profile: String = GradleUtil.getProfile(<span class="string">&quot;dev&quot;</span>)</span><br><span class="line"><span class="comment">// 资源目录</span></span><br><span class="line"><span class="keyword">val</span> resourceDir = <span class="string">&quot;src/main/resources/<span class="variable">$profile</span>&quot;</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;profile:<span class="variable">$profile</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置资源目录</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir(resourceDir)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(<span class="string">&quot;:jx-module:jx-module-system:jx-module-system-biz&quot;</span>))</span><br><span class="line"></span><br><span class="line">    compileOnly(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">    annotationProcessor(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于引入了 log4j2, 所以此处排除默认的 logback 依赖</span></span><br><span class="line">    configurations &#123;</span><br><span class="line">        all &#123;</span><br><span class="line">            exclude(group = <span class="string">&quot;org.springframework.boot&quot;</span>, module = <span class="string">&quot;spring-boot-starter-logging&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&quot;com.laolang.jx&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1&quot;</span></span><br><span class="line"></span><br><span class="line">java &#123;</span><br><span class="line">    targetCompatibility = Version.targetCompatibility</span><br><span class="line">    sourceCompatibility = Version.sourceCompatibility</span><br><span class="line">    withSourcesJar()</span><br><span class="line">    withJavadocJar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java 编译配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">    options.encoding = Charsets.UTF_8.name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javadoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.withType&lt;Javadoc&gt; &#123;</span><br><span class="line">    options &#123;</span><br><span class="line">        encoding = Charsets.UTF_8.name()</span><br><span class="line">        charset(Charsets.UTF_8.name())</span><br><span class="line">    &#125;</span><br><span class="line">    isFailOnError = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布到本地</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">    publications &#123;</span><br><span class="line">        create&lt;MavenPublication&gt;(<span class="string">&quot;maven&quot;</span>) &#123;</span><br><span class="line">            groupId = project.group.toString()</span><br><span class="line">            artifactId = project.name</span><br><span class="line">            version = project.version.toString()</span><br><span class="line"></span><br><span class="line">            from(components[<span class="string">&quot;java&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring-boot 打包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tasks.named&lt;BootJar&gt;(<span class="string">&quot;bootJar&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// jar 包名称</span></span><br><span class="line">    archiveBaseName.<span class="keyword">set</span>(<span class="string">&quot;jx-boot&quot;</span>)</span><br><span class="line">    <span class="comment">// 版本号设置为空</span></span><br><span class="line">    archiveVersion.<span class="keyword">set</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="common-build-gradle-kts"><a href="#common-build-gradle-kts" class="headerlink" title="common build.gradle.kts"></a>common build.gradle.kts</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compileOnlyApi(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    api(<span class="string">&quot;org.springframework.boot:spring-boot-starter-json&quot;</span>)</span><br><span class="line">    api(<span class="string">&quot;org.springframework.boot:spring-boot-starter-log4j2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    compileOnlyApi(libs.knife4j)</span><br><span class="line"></span><br><span class="line">    api(libs.tlog)</span><br><span class="line"></span><br><span class="line">    api(libs.hutool.all)</span><br><span class="line">    api(libs.vavr)</span><br><span class="line">    api(libs.bundles.mapstruct)</span><br><span class="line">    api(libs.guava)</span><br><span class="line">    api(<span class="string">&quot;org.apache.commons:commons-lang3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    compileOnly(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">    annotationProcessor(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jx-spring-boot-starter-web-build-gradle-kts"><a href="#jx-spring-boot-starter-web-build-gradle-kts" class="headerlink" title="jx-spring-boot-starter-web build.gradle.kts"></a>jx-spring-boot-starter-web build.gradle.kts</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    api(project(<span class="string">&quot;:jx-framework:jx-common&quot;</span>))</span><br><span class="line"></span><br><span class="line">    api(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    api(libs.knife4j)</span><br><span class="line"></span><br><span class="line">    compileOnly(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">    annotationProcessor(<span class="string">&quot;org.projectlombok:lombok&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他构建文件"><a href="#其他构建文件" class="headerlink" title="其他构建文件"></a>其他构建文件</h2><p><strong>略</strong></p>
<h2 id="几个小问题"><a href="#几个小问题" class="headerlink" title="几个小问题"></a>几个小问题</h2><h3 id="打包时-bootJar-找不到启动类"><a href="#打包时-bootJar-找不到启动类" class="headerlink" title="打包时 bootJar 找不到启动类"></a>打包时 bootJar 找不到启动类</h3><p><img src="/images/2024-09-12-gradle-study/012.png"></p>
<p>根项目忽略 <code>bootJar</code> 任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 注意这里 </span><br><span class="line"> * 由于根项目添加了 spring-boot 插件, 所有根项目在打包时也会执行 bootJar</span><br><span class="line"> * 而根项目又没有 java 启动类, 就会导致打包报错</span><br><span class="line"> * 下面的配置可忽略根项目的 bootJar 任务</span><br><span class="line"> */</span><br><span class="line">tasks.bootJar &#123;</span><br><span class="line">    enabled = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="idea-打包时-lombok-报错"><a href="#idea-打包时-lombok-报错" class="headerlink" title="idea 打包时 lombok 报错"></a>idea 打包时 lombok 报错</h3><p><img src="/images/2024-09-12-gradle-study/013.png"></p>
<p>此问题不一定每次都会出现, 在设置中使用 <code>wrapper</code> 构建打包即可</p>
<p><img src="/images/2024-09-12-gradle-study/014.png"></p>
<p>一个小发现: 如果 <code>lombok</code> 报错, 那么在 <code>idea</code> 中先用 <code>wrapper</code> 打包, 此时不报错, 再用 <code>Local installtion</code> 打包, 也不会再报错了</p>
<h3 id="关于-spring-boot-与-lombok-的引入"><a href="#关于-spring-boot-与-lombok-的引入" class="headerlink" title="关于 spring boot 与 lombok 的引入"></a>关于 spring boot 与 lombok 的引入</h3><p>按照 <a href="https://docs.springframework.org.cn/spring-boot/gradle-plugin/managing-dependencies.html">官方文档</a> 的描述, 引用方式是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">	java</span><br><span class="line">	id(&quot;org.springframework.boot&quot;) version &quot;3.3.0&quot; apply false</span><br><span class="line">	id(&quot;io.spring.dependency-management&quot;) version &quot;1.1.5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">	imports &#123;</span><br><span class="line">		mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是我这样操作之后无法全局引入 <code>lombok</code>, 所以只好用一个比较丑陋的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    // 不处理主工程, 主工程单独写构建文件</span><br><span class="line">    if (name != &quot;jx-app&quot;) &#123;</span><br><span class="line">        apply(plugin = &quot;java-library&quot;)</span><br><span class="line">        apply(plugin = &quot;maven-publish&quot;)</span><br><span class="line">        apply(plugin = &quot;com.dorongold.task-tree&quot;)</span><br><span class="line">        apply(plugin = &quot;io.spring.dependency-management&quot;)</span><br><span class="line"></span><br><span class="line">        group = &quot;com.laolang.jx&quot;</span><br><span class="line">        version = &quot;0.1&quot;</span><br><span class="line"></span><br><span class="line">        // 导入 Spring Boot 的 bom</span><br><span class="line">        the&lt;DependencyManagementExtension&gt;().apply &#123;</span><br><span class="line">            imports &#123;</span><br><span class="line">                mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 注意这里 全局导入 lombok</span><br><span class="line">        dependencies &#123;</span><br><span class="line">            compileOnly(rootProject.libs.lombok)</span><br><span class="line">            annotationProcessor(rootProject.libs.lombok)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于-subproject-如何使用版本目录"><a href="#关于-subproject-如何使用版本目录" class="headerlink" title="关于 subproject 如何使用版本目录"></a>关于 subproject 如何使用版本目录</h3><p>可参考 <a href="https://stackoverflow.com/questions/77527617/using-version-catalog-in-gradle-kotlin-build-for-subprojects">这里</a>, 重点就是添加 <code>rootProject</code> 前缀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    // 不处理主工程, 主工程单独写构建文件</span><br><span class="line">    if (name != &quot;jx-app&quot;) &#123;</span><br><span class="line">        // 注意这里 全局导入 lombok</span><br><span class="line">        dependencies &#123;</span><br><span class="line">            compileOnly(rootProject.libs.lombok)</span><br><span class="line">            annotationProcessor(rootProject.libs.lombok)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="代码地址-3"><a href="#代码地址-3" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/laolang2016/gradle-study/tree/master/jx-boot-multi">https://github.com/laolang2016/gradle-study/tree/master/jx-boot-multi</a></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol>
<li>多模块有很多比较有意思的问题, 比如依赖传递, 比如子项目公用构建逻辑等, 我这里只是给出了一个可行的例子, 并没有详细解释, 或者说我了解的太过流于表面</li>
<li>使用 gradle 进行多模块构建出了上面这种一个启动项目的, 还有一种就是多个启动项目, 比如 spring cloud 项目, 这个等之后再处理. 大致思路是这样的: 写一个自定义插件, 然后将这个插件应用到每个微服务的启动项目中, 在此插件的配置中填写依赖哪些子模块类似这样<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jxBootApp &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        module(&quot;jx-module-system-api&quot;)</span><br><span class="line">        module(&quot;jx-module-auth-api&quot;)</span><br><span class="line">        module(&quot;jx-mall-product-api&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 启动类就不用配置了, 由自定义插件根据项目名自动填充, 当然命名要有规律</span><br><span class="line">    // 比如项目名是 jx-mall-product-biz , 那么启动类应该是 JxMallProductBizApplication</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>为什么项目结构是这样的? 主要是为了和 <code>maven</code> 构建方式兼容, 如果不考虑兼用 <code>maven</code> , 其实所有子模块应该平铺而不是嵌套</li>
<li>尚未考虑 <code>gradle</code> 和 <code>docker</code> 或者 <code>jenkins</code> 如何结合</li>
<li>有些工程化的东西还没处理, 例如 <code>checkstyle</code></li>
</ol>
<h2 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/354119928">SpringBoot+Gradle构建多模块项目</a></p>
<p><a href="https://blog.csdn.net/qq_36279799/article/details/131983818">springboot gradle kotlin 多模块（或微服务）统一依赖及版本管理和构建不同环境打包task,docker镜像构建task</a></p>
<p><a href="https://github.com/emmapatterson/multi-module-spring-boot">https://github.com/emmapatterson/multi-module-spring-boot</a></p>
<p><a href="https://docs.springframework.org.cn/spring-boot/gradle-plugin/managing-dependencies.html">spring 中文文档 gradle 插件 管理依赖项</a></p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.4.5/gradle-plugin/reference/htmlsingle/">spring boot gradle 插件官方文档</a></p>
<p><a href="https://juejin.cn/post/6955854790027345934">Springboot 多模块依赖构建常见问题</a></p>
<p><a href="https://stackoverflow.com/questions/77527617/using-version-catalog-in-gradle-kotlin-build-for-subprojects">Using version catalog in Gradle Kotlin build for subprojects</a></p>
]]></content>
      <categories>
        <category>java</category>
        <category>gradle</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
</search>
